
# coding: utf-8

# In[1]:

import numpy as np
import pandas as pd


# In[2]:

df_train = pd.read_csv("knn.csv")
df_item = pd.read_csv("itemsfill.csv")
df_test = pd.read_csv("imputed_class.csv")
print(df_train.shape, df_item.shape, df_test.shape)


# In[3]:

del df_test["Unnamed: 0"]
df_test.head()


# In[4]:

df_train["lineID"] = pd.DataFrame(df_train.index)
df_train.head()


# In[5]:

df_item.head()


# In[6]:

# 大小寫轉換
df_item.pharmForm = df_item.pharmForm.str.upper()


# In[7]:

# content整理
content = pd.DataFrame(df_item.content.str.split('X',2).tolist(), columns = ['x','y','z'])
content = content.fillna('1')
content.x = pd.to_numeric(content.x, errors='coerce')
content.y = pd.to_numeric(content.y, errors='coerce')
content.z = pd.to_numeric(content.z, errors='coerce')
content['Content'] = content.x * content.y * content.z

df_items1 = pd.concat([df_item, content], axis=1, join_axes=[df_item.index])
del df_items1["x"]
del df_items1["y"]
del df_items1["z"]
del df_items1["content"]

df_items1.Content = df_items1.Content.fillna(value = df_items1.Content.mean())

df_items1.head()


# In[8]:

result = df_train.merge(df_items1, how='inner', on = ['pid'])
result = result.sort_values(['lineID'], ascending = True)
result = result.reset_index(drop=True, inplace=False, col_level=0, col_fill='')

result_test = df_test.merge(df_items1, how="inner", on = ["pid"])
result_test = result_test.sort_values(['lineID'], ascending = True)
result_test = result_test.reset_index(drop=True, inplace=False, col_level=0, col_fill='')

result.shape, result_test.shape


# In[9]:

# 標準類別化
def pre_all(df):
    df_num = df[column_conti]
    
    from sklearn.preprocessing import MinMaxScaler
    from sklearn.preprocessing import StandardScaler
#    sc = MinMaxScaler(feature_range=(0, 1), copy=True)
    sc = StandardScaler()
    Z = pd.DataFrame(sc.fit_transform(df_num))
    Z.columns = column_conti
    
    df_cat = df.drop(column_conti, axis=1)
    df_cat = df_cat.reset_index(drop=True, inplace=False, col_level=0, col_fill='')
    
    df_st = df_cat.join(Z, on=None, how='inner', lsuffix='', rsuffix='', sort=False)
    return df_st

def cate(result):
    result.group = result.group.astype("category").cat.codes
    result.unit = result.unit.astype("category").cat.codes
    result.pharmForm = result.pharmForm.astype("category").cat.codes
    result.campaignIndex = result.campaignIndex.astype("category").cat.codes
    return result


# In[10]:

from IPython.display import display
display(result.isnull().sum())


# In[11]:

result = cate(result)
result_test = cate(result_test)


# In[13]:

column_conti = [u'day', u'pid', u'competitorPrice', u'price', u'lineID',
                u'manufacturer', u'group', u'unit', u'pharmForm', u'genericProduct',
                u'salesIndex', u'category', u'campaignIndex', u'rrp', u'Content']
result1_test = pre_all(result_test)


# ### 算哪些是重點商品

# In[24]:

r = pd.DataFrame(df_train.groupby('pid')['revenue'].sum())
r.columns = ["rev"]
r["pid"] = np.array(r.index)

n = pd.DataFrame(df_train["pid"].value_counts())
n.columns = {"num"}
n["pid"] = np.array(n.index)

df_nr = pd.merge(r, n, how = 'inner', on = ['pid'])
print(df_nr.shape)
df_nr.head()


# In[36]:

import matplotlib.pyplot as plt
df_nr[(df_nr.num < 15000)&(df_nr.rev < 60000)].plot.scatter(x = "rev", y = "num", s = 30, c = "r", alpha = 0.1)
plt.show()


# In[61]:

result1 = pd.merge(result, df_nr, how='inner', on=['pid'])
result1 = result1.sort(columns = "lineID", axis = 0, ascending = True, inplace = False, kind = 'quicksort', na_position = 'last')
result1 = result1.reset_index(drop = True, inplace = False, col_level = 0, col_fill = '')

column_conti = [u'day', u'pid', 'availability', u'competitorPrice', u'price', u'lineID',
                u'manufacturer', u'group', u'unit', u'pharmForm', u'genericProduct',
                u'salesIndex', u'category', u'campaignIndex', u'rrp', u'Content']
result2 = pre_all(result1)
result2.head()


# In[96]:

def split(df, y_prediction):
    from sklearn.model_selection import train_test_split

    X = np.array(df.drop([y_prediction], axis=1))
    y = np.array(df[[y_prediction]])
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
    print('Number of training: %d' % X_train.shape[0])
    print('Number of testing: %d' % X_test.shape[0])
    return X_train, X_test, y_train, y_test

def training(model, y_train):
    from sklearn.model_selection import cross_val_score
#    score = cross_val_score(model, X_train, y_train, cv = 10)
    model.fit(X_train, y_train)
#    print('cross_val_score : %.2f' % (np.sum(score) / 10))

# classification
def testing(model, y_test):
    y_pred = model.predict(X_test)
    print('Misclassified samples: %d' % (y_test != y_pred).sum())
    
    from sklearn.metrics import accuracy_score
    print('Accuracy : %.2f' % accuracy_score(y_test, y_pred))
    return y_pred

# regression
def testing_regression(model, X_test, y_test):
    pred = model.predict(X_test).reshape(y_test.shape[0], 1)  
    y_test = y_test.reshape(X_test.shape[0], 1)
    
    score = np.dot((pred - y_test).T, (pred - y_test))
    from sklearn.metrics import mean_squared_error
    score1 = mean_squared_error(y_test, pred, sample_weight = None, multioutput = 'uniform_average')
    print('===Euclidean_Distance===')
    print(score[0])
    print('===MSE===')
    print(score1)
    return pred

def plot_regression(test, pred):
    import matplotlib.pyplot as plt
    
    test = test.reshape(pred.shape[0],1)
    a = np.append(pred, test, axis=1)
    b = pd.DataFrame(a)
    b.columns = ["pred", "test"]  
    b.plot.scatter(x = 'test', y = 'pred', s = 50, alpha = 0.8)
    plt.title("scatter plot of pridiction and true")
    plt.show()


# In[112]:

train = result2.iloc[:1700000, :]
val = result2.iloc[1700001:, :]

t = 500
print(train[(train.rev > t)].shape)
df_big = train[(train.rev > t)]
df_big.head()


# In[113]:

from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
X, y = df_big.drop(['click','basket','order','revenue','rev','num'], axis = 1), df_big["order"]

etc = ExtraTreesClassifier()
etc = etc.fit(X, y)
etc.feature_importances_  

model = SelectFromModel(etc, prefit = True)
X_new = model.transform(X)
X_new.shape


# In[114]:

df_big = df_big.drop(['click','basket','order','rev','num'], axis = 1)
X_train, X_test, y_train, y_test = split(df_big, "revenue")
#X_train, X_test = X_new[:118000], X_new[118001:]
#y_train, y_test = np.array(df_big.iloc[:118000,[3]]), np.array(df_big.iloc[118001:,[3]])


# In[116]:

from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor(n_estimators = 10, 
                            max_features = 'log2', 
                            criterion = 'mse', 
                            max_depth = None, 
                            min_samples_split = 20, 
                            min_samples_leaf = 10, 
                            min_weight_fraction_leaf = 0.0, 
                            max_leaf_nodes = None, 
                            min_impurity_split = 1e-07, 
                            bootstrap = True, 
                            oob_score = True, 
                            n_jobs = 1, 
                            random_state = 0, 
                            verbose = 0, 
                            warm_start = False)
training(rfr, y_train)


# In[117]:

pred_rfr = testing_regression(rfr, X_test, y_test)
plot_regression(y_test, pred_rfr)


# In[124]:

X_val = val.drop(['click','basket','order','revenue','rev','num'], axis = 1)
y_val = np.array(val["revenue"])
pred_val = testing_regression(rfr, X_val, y_val)
plot_regression(y_val, pred_val)


# MSE:  
# all features: 107, 97  
# 

# In[121]:

import pandas
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasRegressor
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

def baseline_model():
    # create model
    model = Sequential()
    model.add(Dense(128, input_dim=17, init = 'normal', activation = 'relu'))
    model.add(Dense(64, init = 'normal', activation = 'relu'))
    model.add(Dense(1, init = 'normal'))
    # Compile model
    model.compile(loss = 'mean_squared_error', optimizer = 'adam')
    return model

clf = KerasRegressor(build_fn = baseline_model, nb_epoch = 100, batch_size = 112249, verbose = 2)
clf.fit(X_train, y_train)


# In[122]:

pred_nn = testing_regression(clf, X_test, y_test)
plot_regression(y_test, pred_nn)
